title: =@ctx.datasources.steps.isRevealed
type: jig.default
expressions:
  loadNumber: |
    =$boolean(@ctx.datasources.steps.isChecked)
    
# onFocus: 
#   type: action.execute-entities
#   options:
#     provider: DATA_PROVIDER_DYNAMIC
#     entity: default/steps
#     method: update
#     goBack: stay
#     data: =@ctx.datasources.steps.{"id" :id, "isRevealed" :false}[]

datasources:
  strategies: 
    type: datasource.sqlite
    options:
      provider: DATA_PROVIDER_DYNAMIC
  
      entities:
        - default/strategies
  
      query: 
        SELECT 
          id, 
          '$.name',
          '$.time',
          '$.category_id',
          '$.category_name',
          '$.finishTime',
          '$.description',
          '$.image',
          '$.isDone',
          '$.isInProgress',
          '$.strategy_id',
          '$.steps',
          json_array_length(json_extract(data, '$.steps')) AS numberOfSteps 
        FROM [default/strategies] 
        WHERE '$.strategy_id' = @strategyId
      queryParameters:
        strategyId: =@ctx.jig.inputs.strategyId
  
  steps:
    type: datasource.sqlite
    options:
      provider: DATA_PROVIDER_DYNAMIC
  
      entities:
        - default/steps
  
      query: 
        SELECT 
          id,
          '$.title',
          '$.step',
          '$.step_id',
          '$.isChecked',
          '$.strategy_id',
          '$.isRevealed'
        FROM [default/steps] 
        WHERE '$.strategy_id' = @strategyId
        ORDER BY '$.step'
      queryParameters:
       strategyId: =@ctx.jig.inputs.strategyId
  
  row_count:
    type: datasource.sqlite
    options:
      provider: DATA_PROVIDER_DYNAMIC
  
      entities:
        - default/steps
  
      query: |
        SELECT COUNT(*) AS row_count
        FROM [default/steps] 
        WHERE '$.strategy_id' = @strategyId
        ORDER BY '$.step'
      queryParameters:
        strategyId: =@ctx.jig.inputs.strategyId
        
  isDone_count:
    type: datasource.sqlite
    options:
      provider: DATA_PROVIDER_DYNAMIC
  
      entities:
        - default/steps
  
      query: |
        SELECT COUNT(*) AS isDone
        FROM [default/steps] 
        WHERE '$.strategy_id' = @strategyId
        AND '$.isChecked' = 1
      queryParameters:
        strategyId: =@ctx.jig.inputs.strategyId

children:
  - type: component.custom-component
    componentId: strategy-card
    inputs:
      strategies: =@ctx.datasources.strategies
      numberOfSteps: =@ctx.datasources.row_count.row_count
      isDoneNumber: =@ctx.datasources.isDone_count.isDone
  - type: component.custom-component
    when: =@ctx.datasources.strategies.isInProgress = 0 and @ctx.datasources.strategies.isDone = 0
    componentId: strategies-start-restart-button
    inputs:
      title: Let's start
      isActivityStarted: true
      strategyId: =@ctx.jig.inputs.strategyId
      setActivityInProgress:  =@ctx.datasources.strategies.{"id" :id, "isInProgress" :true}[]
      action: =@ctx.datasources.steps.{"id" :id, "isChecked" :0}[]
  - type: component.list
    options:
      data: =@ctx.datasources.steps
      item: 
        type: component.custom-component
        componentId: strategy-steps-card
        inputs:
          steps: =@ctx.current.item
          isChecked: =@ctx.current.item.isChecked
          numberOfSteps: =@ctx.datasources.row_count.row_count
          isDoneCount: =@ctx.datasources.isDone_count.isDone
  # - type: component.list
  #   options:
  #     data: =@ctx.datasources.steps
  #     maximumItemsToRender: 8
  #     item: 
  #       type: component.list-item
  #       when: =@ctx.current.item.isRevealed
  #       options:
  #         style:
  #           isDisabled: =@ctx.current.item.isRevealed = 0 ? true:false
  #         title: =@ctx.current.item.step
  #         subtitle: =@ctx.current.item.title
  #         rightElement: 
  #           element: checkbox
  #           value: =$number(@ctx.current.item.isChecked)
  #           onChange: 
  #             type: action.action-list
  #             options:
  #               actions:
  #                 - type: action.execute-entity
  #                   when: =@ctx.datasources.row_count.row_count != @ctx.datasources.isDone_count.isDone ? true:false
  #                   options:
  #                     provider: DATA_PROVIDER_DYNAMIC
  #                     entity: default/steps
  #                     method: update
  #                     goBack: stay
  #                     data:
  #                       id: =@ctx.datasources.steps[step = @ctx.current.item.step + 1].id
  #                       isRevealed: true
  #                 - type: action.execute-entity
  #                   options:
  #                     provider: DATA_PROVIDER_DYNAMIC
  #                     entity: default/steps
  #                     method: update
  #                     goBack: stay
  #                     data:
  #                       id: =@ctx.current.item.id
  #                       isChecked: =@ctx.current.state.checked
            
  - type: component.custom-component
    when: =@ctx.datasources.strategies.isDone = 1
    componentId: finish
    inputs:
      finishTime: =@ctx.datasources.strategies.finishTime
  - type: component.custom-component
    when: =@ctx.datasources.strategies.isInProgress = 1
    componentId: steps-actions
    inputs: 
      # action: =@ctx.datasources.steps.{"id" :id, "isChecked" :0}[]
      stepsCount: =@ctx.datasources.row_count.row_count
      isDoneCount: =@ctx.datasources.isDone_count.isDone
      strategyId: =@ctx.jig.inputs.strategyId
      # setActivityAsDone: =@ctx.datasources.strategies.{"id" :id, "isDone" :true}[]
      # resetActivityAsDone: =@ctx.datasources.strategies.{"id" :id, "isDone" :false}[]
      # resetActivityInProgress:  =@ctx.datasources.strategies.{"id" :id, "isInProgress" :false}[]
      # finishTime: =@ctx.datasources.strategies.{"id" :id, "finishTime" :$fromMillis($toMillis(@ctx.solution.state.activityFinishTime) - $toMillis(@ctx.solution.state.activityStartTime), '[m01]') & ' min. ' & $fromMillis($toMillis(@ctx.solution.state.activityFinishTime) - $toMillis(@ctx.solution.state.activityStartTime), '[s01]') & ' sec.'}[]
  - type: component.custom-component
    when: =(@ctx.datasources.strategies.isInProgress = 0) and (@ctx.datasources.strategies.isDone = 1)
    componentId: strategies-start-restart-button
    inputs:
      title: Start Over
      isActivityStarted: true
      strategyId: =@ctx.jig.inputs.strategyId
      # setActivityInProgress:  =@ctx.datasources.strategies.{"id" :id, "isInProgress" :true}[]
      # resetActivityAsDone: =@ctx.datasources.strategies.{"id" :id, "isDone" :false}[]
      # isDone: =@ctx.datasources.strategies.isDone
      # action: =@ctx.datasources.steps.{"id" :id, "isChecked" :0}[]
      # resetRevealedSteps: =@ctx.datasources.steps.{"id" :id, "isRevealed" :0}[]
      
      